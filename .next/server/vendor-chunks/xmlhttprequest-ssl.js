/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/xmlhttprequest-ssl";
exports.ids = ["vendor-chunks/xmlhttprequest-ssl"];
exports.modules = {

/***/ "(ssr)/./node_modules/xmlhttprequest-ssl/lib/XMLHttpRequest.js":
/*!***************************************************************!*\
  !*** ./node_modules/xmlhttprequest-ssl/lib/XMLHttpRequest.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.\n *\n * This can be used with JS designed for browsers to improve reuse of code and\n * allow the use of existing libraries.\n *\n * Usage: include(\"XMLHttpRequest.js\") and use XMLHttpRequest per W3C specs.\n *\n * @author Dan DeFelippi <dan@driverdan.com>\n * @contributor David Ellis <d.f.ellis@ieee.org>\n * @license MIT\n */ var fs = __webpack_require__(/*! fs */ \"fs\");\nvar Url = __webpack_require__(/*! url */ \"url\");\nvar spawn = (__webpack_require__(/*! child_process */ \"child_process\").spawn);\n/**\n * Module exports.\n */ module.exports = XMLHttpRequest;\n// backwards-compat\nXMLHttpRequest.XMLHttpRequest = XMLHttpRequest;\n/**\n * `XMLHttpRequest` constructor.\n *\n * Supported options for the `opts` object are:\n *\n *  - `agent`: An http.Agent instance; http.globalAgent may be used; if 'undefined', agent usage is disabled\n *\n * @param {Object} opts optional \"options\" object\n */ function XMLHttpRequest(opts) {\n    \"use strict\";\n    opts = opts || {};\n    /**\n   * Private variables\n   */ var self = this;\n    var http = __webpack_require__(/*! http */ \"http\");\n    var https = __webpack_require__(/*! https */ \"https\");\n    // Holds http.js objects\n    var request;\n    var response;\n    // Request settings\n    var settings = {};\n    // Disable header blacklist.\n    // Not part of XHR specs.\n    var disableHeaderCheck = false;\n    // Set some default headers\n    var defaultHeaders = {\n        \"User-Agent\": \"node-XMLHttpRequest\",\n        \"Accept\": \"*/*\"\n    };\n    var headers = Object.assign({}, defaultHeaders);\n    // These headers are not user setable.\n    // The following are allowed but banned in the spec:\n    // * user-agent\n    var forbiddenRequestHeaders = [\n        \"accept-charset\",\n        \"accept-encoding\",\n        \"access-control-request-headers\",\n        \"access-control-request-method\",\n        \"connection\",\n        \"content-length\",\n        \"content-transfer-encoding\",\n        \"cookie\",\n        \"cookie2\",\n        \"date\",\n        \"expect\",\n        \"host\",\n        \"keep-alive\",\n        \"origin\",\n        \"referer\",\n        \"te\",\n        \"trailer\",\n        \"transfer-encoding\",\n        \"upgrade\",\n        \"via\"\n    ];\n    // These request methods are not allowed\n    var forbiddenRequestMethods = [\n        \"TRACE\",\n        \"TRACK\",\n        \"CONNECT\"\n    ];\n    // Send flag\n    var sendFlag = false;\n    // Error flag, used when errors occur or abort is called\n    var errorFlag = false;\n    var abortedFlag = false;\n    // Event listeners\n    var listeners = {};\n    /**\n   * Constants\n   */ this.UNSENT = 0;\n    this.OPENED = 1;\n    this.HEADERS_RECEIVED = 2;\n    this.LOADING = 3;\n    this.DONE = 4;\n    /**\n   * Public vars\n   */ // Current state\n    this.readyState = this.UNSENT;\n    // default ready state change handler in case one is not set or is set late\n    this.onreadystatechange = null;\n    // Result & response\n    this.responseText = \"\";\n    this.responseXML = \"\";\n    this.status = null;\n    this.statusText = null;\n    /**\n   * Private methods\n   */ /**\n   * Check if the specified header is allowed.\n   *\n   * @param string header Header to validate\n   * @return boolean False if not allowed, otherwise true\n   */ var isAllowedHttpHeader = function(header) {\n        return disableHeaderCheck || header && forbiddenRequestHeaders.indexOf(header.toLowerCase()) === -1;\n    };\n    /**\n   * Check if the specified method is allowed.\n   *\n   * @param string method Request method to validate\n   * @return boolean False if not allowed, otherwise true\n   */ var isAllowedHttpMethod = function(method) {\n        return method && forbiddenRequestMethods.indexOf(method) === -1;\n    };\n    /**\n   * Public methods\n   */ /**\n   * Open the connection. Currently supports local server requests.\n   *\n   * @param string method Connection method (eg GET, POST)\n   * @param string url URL for the connection.\n   * @param boolean async Asynchronous connection. Default is true.\n   * @param string user Username for basic authentication (optional)\n   * @param string password Password for basic authentication (optional)\n   */ this.open = function(method, url, async, user, password) {\n        this.abort();\n        errorFlag = false;\n        abortedFlag = false;\n        // Check for valid request method\n        if (!isAllowedHttpMethod(method)) {\n            throw new Error(\"SecurityError: Request method not allowed\");\n        }\n        settings = {\n            \"method\": method,\n            \"url\": url.toString(),\n            \"async\": typeof async !== \"boolean\" ? true : async,\n            \"user\": user || null,\n            \"password\": password || null\n        };\n        setState(this.OPENED);\n    };\n    /**\n   * Disables or enables isAllowedHttpHeader() check the request. Enabled by default.\n   * This does not conform to the W3C spec.\n   *\n   * @param boolean state Enable or disable header checking.\n   */ this.setDisableHeaderCheck = function(state) {\n        disableHeaderCheck = state;\n    };\n    /**\n   * Sets a header for the request.\n   *\n   * @param string header Header name\n   * @param string value Header value\n   * @return boolean Header added\n   */ this.setRequestHeader = function(header, value) {\n        if (this.readyState != this.OPENED) {\n            throw new Error(\"INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN\");\n        }\n        if (!isAllowedHttpHeader(header)) {\n            console.warn('Refused to set unsafe header \"' + header + '\"');\n            return false;\n        }\n        if (sendFlag) {\n            throw new Error(\"INVALID_STATE_ERR: send flag is true\");\n        }\n        headers[header] = value;\n        return true;\n    };\n    /**\n   * Gets a header from the server response.\n   *\n   * @param string header Name of header to get.\n   * @return string Text of the header or null if it doesn't exist.\n   */ this.getResponseHeader = function(header) {\n        if (typeof header === \"string\" && this.readyState > this.OPENED && response.headers[header.toLowerCase()] && !errorFlag) {\n            return response.headers[header.toLowerCase()];\n        }\n        return null;\n    };\n    /**\n   * Gets all the response headers.\n   *\n   * @return string A string with all response headers separated by CR+LF\n   */ this.getAllResponseHeaders = function() {\n        if (this.readyState < this.HEADERS_RECEIVED || errorFlag) {\n            return \"\";\n        }\n        var result = \"\";\n        for(var i in response.headers){\n            // Cookie headers are excluded\n            if (i !== \"set-cookie\" && i !== \"set-cookie2\") {\n                result += i + \": \" + response.headers[i] + \"\\r\\n\";\n            }\n        }\n        return result.substr(0, result.length - 2);\n    };\n    /**\n   * Gets a request header\n   *\n   * @param string name Name of header to get\n   * @return string Returns the request header or empty string if not set\n   */ this.getRequestHeader = function(name) {\n        // @TODO Make this case insensitive\n        if (typeof name === \"string\" && headers[name]) {\n            return headers[name];\n        }\n        return \"\";\n    };\n    /**\n   * Sends the request to the server.\n   *\n   * @param string data Optional data to send as request body.\n   */ this.send = function(data) {\n        if (this.readyState != this.OPENED) {\n            throw new Error(\"INVALID_STATE_ERR: connection must be opened before send() is called\");\n        }\n        if (sendFlag) {\n            throw new Error(\"INVALID_STATE_ERR: send has already been called\");\n        }\n        var ssl = false, local = false;\n        var url = Url.parse(settings.url);\n        var host;\n        // Determine the server\n        switch(url.protocol){\n            case \"https:\":\n                ssl = true;\n            // SSL & non-SSL both need host, no break here.\n            case \"http:\":\n                host = url.hostname;\n                break;\n            case \"file:\":\n                local = true;\n                break;\n            case undefined:\n            case \"\":\n                host = \"localhost\";\n                break;\n            default:\n                throw new Error(\"Protocol not supported.\");\n        }\n        // Load files off the local filesystem (file://)\n        if (local) {\n            if (settings.method !== \"GET\") {\n                throw new Error(\"XMLHttpRequest: Only GET method is supported\");\n            }\n            if (settings.async) {\n                fs.readFile(unescape(url.pathname), \"utf8\", function(error, data) {\n                    if (error) {\n                        self.handleError(error, error.errno || -1);\n                    } else {\n                        self.status = 200;\n                        self.responseText = data;\n                        setState(self.DONE);\n                    }\n                });\n            } else {\n                try {\n                    this.responseText = fs.readFileSync(unescape(url.pathname), \"utf8\");\n                    this.status = 200;\n                    setState(self.DONE);\n                } catch (e) {\n                    this.handleError(e, e.errno || -1);\n                }\n            }\n            return;\n        }\n        // Default to port 80. If accessing localhost on another port be sure\n        // to use http://localhost:port/path\n        var port = url.port || (ssl ? 443 : 80);\n        // Add query string if one is used\n        var uri = url.pathname + (url.search ? url.search : \"\");\n        // Set the Host header or the server may reject the request\n        headers[\"Host\"] = host;\n        if (!(ssl && port === 443 || port === 80)) {\n            headers[\"Host\"] += \":\" + url.port;\n        }\n        // Set Basic Auth if necessary\n        if (settings.user) {\n            if (typeof settings.password == \"undefined\") {\n                settings.password = \"\";\n            }\n            var authBuf = new Buffer(settings.user + \":\" + settings.password);\n            headers[\"Authorization\"] = \"Basic \" + authBuf.toString(\"base64\");\n        }\n        // Set content length header\n        if (settings.method === \"GET\" || settings.method === \"HEAD\") {\n            data = null;\n        } else if (data) {\n            headers[\"Content-Length\"] = Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data);\n            if (!headers[\"Content-Type\"]) {\n                headers[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\n            }\n        } else if (settings.method === \"POST\") {\n            // For a post with no data set Content-Length: 0.\n            // This is required by buggy servers that don't meet the specs.\n            headers[\"Content-Length\"] = 0;\n        }\n        var agent = opts.agent || false;\n        var options = {\n            host: host,\n            port: port,\n            path: uri,\n            method: settings.method,\n            headers: headers,\n            agent: agent\n        };\n        if (ssl) {\n            options.pfx = opts.pfx;\n            options.key = opts.key;\n            options.passphrase = opts.passphrase;\n            options.cert = opts.cert;\n            options.ca = opts.ca;\n            options.ciphers = opts.ciphers;\n            options.rejectUnauthorized = opts.rejectUnauthorized === false ? false : true;\n        }\n        // Reset error flag\n        errorFlag = false;\n        // Handle async requests\n        if (settings.async) {\n            // Use the proper protocol\n            var doRequest = ssl ? https.request : http.request;\n            // Request is being sent, set send flag\n            sendFlag = true;\n            // As per spec, this is called here for historical reasons.\n            self.dispatchEvent(\"readystatechange\");\n            // Handler for the response\n            var responseHandler = function(resp) {\n                // Set response var to the response we got back\n                // This is so it remains accessable outside this scope\n                response = resp;\n                // Check for redirect\n                // @TODO Prevent looped redirects\n                if (response.statusCode === 302 || response.statusCode === 303 || response.statusCode === 307) {\n                    // Change URL to the redirect location\n                    settings.url = response.headers.location;\n                    var url = Url.parse(settings.url);\n                    // Set host var in case it's used later\n                    host = url.hostname;\n                    // Options for the new request\n                    var newOptions = {\n                        hostname: url.hostname,\n                        port: url.port,\n                        path: url.path,\n                        method: response.statusCode === 303 ? \"GET\" : settings.method,\n                        headers: headers\n                    };\n                    if (ssl) {\n                        newOptions.pfx = opts.pfx;\n                        newOptions.key = opts.key;\n                        newOptions.passphrase = opts.passphrase;\n                        newOptions.cert = opts.cert;\n                        newOptions.ca = opts.ca;\n                        newOptions.ciphers = opts.ciphers;\n                        newOptions.rejectUnauthorized = opts.rejectUnauthorized === false ? false : true;\n                    }\n                    // Issue the new request\n                    request = doRequest(newOptions, responseHandler).on(\"error\", errorHandler);\n                    request.end();\n                    // @TODO Check if an XHR event needs to be fired here\n                    return;\n                }\n                if (response && response.setEncoding) {\n                    response.setEncoding(\"utf8\");\n                }\n                setState(self.HEADERS_RECEIVED);\n                self.status = response.statusCode;\n                response.on(\"data\", function(chunk) {\n                    // Make sure there's some data\n                    if (chunk) {\n                        self.responseText += chunk;\n                    }\n                    // Don't emit state changes if the connection has been aborted.\n                    if (sendFlag) {\n                        setState(self.LOADING);\n                    }\n                });\n                response.on(\"end\", function() {\n                    if (sendFlag) {\n                        // The sendFlag needs to be set before setState is called.  Otherwise if we are chaining callbacks\n                        // there can be a timing issue (the callback is called and a new call is made before the flag is reset).\n                        sendFlag = false;\n                        // Discard the 'end' event if the connection has been aborted\n                        setState(self.DONE);\n                    }\n                });\n                response.on(\"error\", function(error) {\n                    self.handleError(error);\n                });\n            };\n            // Error handler for the request\n            var errorHandler = function(error) {\n                self.handleError(error);\n            };\n            // Create the request\n            request = doRequest(options, responseHandler).on(\"error\", errorHandler);\n            if (opts.autoUnref) {\n                request.on(\"socket\", (socket)=>{\n                    socket.unref();\n                });\n            }\n            // Node 0.4 and later won't accept empty data. Make sure it's needed.\n            if (data) {\n                request.write(data);\n            }\n            request.end();\n            self.dispatchEvent(\"loadstart\");\n        } else {\n            // Create a temporary file for communication with the other Node process\n            var contentFile = \".node-xmlhttprequest-content-\" + process.pid;\n            var syncFile = \".node-xmlhttprequest-sync-\" + process.pid;\n            fs.writeFileSync(syncFile, \"\", \"utf8\");\n            // The async request the other Node process executes\n            var execString = \"var http = require('http'), https = require('https'), fs = require('fs');\" + \"var doRequest = http\" + (ssl ? \"s\" : \"\") + \".request;\" + \"var options = \" + JSON.stringify(options) + \";\" + \"var responseText = '';\" + \"var req = doRequest(options, function(response) {\" + \"response.setEncoding('utf8');\" + \"response.on('data', function(chunk) {\" + \"  responseText += chunk;\" + \"});\" + \"response.on('end', function() {\" + \"fs.writeFileSync('\" + contentFile + \"', 'NODE-XMLHTTPREQUEST-STATUS:' + response.statusCode + ',' + responseText, 'utf8');\" + \"fs.unlinkSync('\" + syncFile + \"');\" + \"});\" + \"response.on('error', function(error) {\" + \"fs.writeFileSync('\" + contentFile + \"', 'NODE-XMLHTTPREQUEST-ERROR:' + JSON.stringify(error), 'utf8');\" + \"fs.unlinkSync('\" + syncFile + \"');\" + \"});\" + \"}).on('error', function(error) {\" + \"fs.writeFileSync('\" + contentFile + \"', 'NODE-XMLHTTPREQUEST-ERROR:' + JSON.stringify(error), 'utf8');\" + \"fs.unlinkSync('\" + syncFile + \"');\" + \"});\" + (data ? \"req.write('\" + JSON.stringify(data).slice(1, -1).replace(/'/g, \"\\\\'\") + \"');\" : \"\") + \"req.end();\";\n            // Start the other Node Process, executing this string\n            var syncProc = spawn(process.argv[0], [\n                \"-e\",\n                execString\n            ]);\n            var statusText;\n            while(fs.existsSync(syncFile)){\n            // Wait while the sync file is empty\n            }\n            self.responseText = fs.readFileSync(contentFile, \"utf8\");\n            // Kill the child process once the file has data\n            syncProc.stdin.end();\n            // Remove the temporary file\n            fs.unlinkSync(contentFile);\n            if (self.responseText.match(/^NODE-XMLHTTPREQUEST-ERROR:/)) {\n                // If the file returned an error, handle it\n                var errorObj = self.responseText.replace(/^NODE-XMLHTTPREQUEST-ERROR:/, \"\");\n                self.handleError(errorObj, 503);\n            } else {\n                // If the file returned okay, parse its data and move to the DONE state\n                self.status = self.responseText.replace(/^NODE-XMLHTTPREQUEST-STATUS:([0-9]*),.*/, \"$1\");\n                self.responseText = self.responseText.replace(/^NODE-XMLHTTPREQUEST-STATUS:[0-9]*,(.*)/, \"$1\");\n                setState(self.DONE);\n            }\n        }\n    };\n    /**\n   * Called when an error is encountered to deal with it.\n   * @param  status  {number}    HTTP status code to use rather than the default (0) for XHR errors.\n   */ this.handleError = function(error, status) {\n        this.status = status || 0;\n        this.statusText = error;\n        this.responseText = error.stack;\n        errorFlag = true;\n        setState(this.DONE);\n    };\n    /**\n   * Aborts a request.\n   */ this.abort = function() {\n        if (request) {\n            request.abort();\n            request = null;\n        }\n        headers = Object.assign({}, defaultHeaders);\n        this.responseText = \"\";\n        this.responseXML = \"\";\n        errorFlag = abortedFlag = true;\n        if (this.readyState !== this.UNSENT && (this.readyState !== this.OPENED || sendFlag) && this.readyState !== this.DONE) {\n            sendFlag = false;\n            setState(this.DONE);\n        }\n        this.readyState = this.UNSENT;\n    };\n    /**\n   * Adds an event listener. Preferred method of binding to events.\n   */ this.addEventListener = function(event, callback) {\n        if (!(event in listeners)) {\n            listeners[event] = [];\n        }\n        // Currently allows duplicate callbacks. Should it?\n        listeners[event].push(callback);\n    };\n    /**\n   * Remove an event callback that has already been bound.\n   * Only works on the matching funciton, cannot be a copy.\n   */ this.removeEventListener = function(event, callback) {\n        if (event in listeners) {\n            // Filter will return a new array with the callback removed\n            listeners[event] = listeners[event].filter(function(ev) {\n                return ev !== callback;\n            });\n        }\n    };\n    /**\n   * Dispatch any events, including both \"on\" methods and events attached using addEventListener.\n   */ this.dispatchEvent = function(event) {\n        if (typeof self[\"on\" + event] === \"function\") {\n            if (this.readyState === this.DONE) setImmediate(function() {\n                self[\"on\" + event]();\n            });\n            else self[\"on\" + event]();\n        }\n        if (event in listeners) {\n            for(let i = 0, len = listeners[event].length; i < len; i++){\n                if (this.readyState === this.DONE) setImmediate(function() {\n                    listeners[event][i].call(self);\n                });\n                else listeners[event][i].call(self);\n            }\n        }\n    };\n    /**\n   * Changes readyState and calls onreadystatechange.\n   *\n   * @param int state New state\n   */ var setState = function(state) {\n        if (self.readyState === state || self.readyState === self.UNSENT && abortedFlag) return;\n        self.readyState = state;\n        if (settings.async || self.readyState < self.OPENED || self.readyState === self.DONE) {\n            self.dispatchEvent(\"readystatechange\");\n        }\n        if (self.readyState === self.DONE) {\n            let fire;\n            if (abortedFlag) fire = \"abort\";\n            else if (errorFlag) fire = \"error\";\n            else fire = \"load\";\n            self.dispatchEvent(fire);\n            // @TODO figure out InspectorInstrumentation::didLoadXHR(cookie)\n            self.dispatchEvent(\"loadend\");\n        }\n    };\n}\n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveG1saHR0cHJlcXVlc3Qtc3NsL2xpYi9YTUxIdHRwUmVxdWVzdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Q0FXQyxHQUVELElBQUlBLEtBQUtDLG1CQUFPQSxDQUFDO0FBQ2pCLElBQUlDLE1BQU1ELG1CQUFPQSxDQUFDO0FBQ2xCLElBQUlFLFFBQVFGLGlFQUE4QjtBQUUxQzs7Q0FFQyxHQUVERyxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLG1CQUFtQjtBQUNuQkEsZUFBZUEsY0FBYyxHQUFHQTtBQUVoQzs7Ozs7Ozs7Q0FRQyxHQUVELFNBQVNBLGVBQWVDLElBQUk7SUFDMUI7SUFFQUEsT0FBT0EsUUFBUSxDQUFDO0lBRWhCOztHQUVDLEdBQ0QsSUFBSUMsT0FBTyxJQUFJO0lBQ2YsSUFBSUMsT0FBT1IsbUJBQU9BLENBQUM7SUFDbkIsSUFBSVMsUUFBUVQsbUJBQU9BLENBQUM7SUFFcEIsd0JBQXdCO0lBQ3hCLElBQUlVO0lBQ0osSUFBSUM7SUFFSixtQkFBbUI7SUFDbkIsSUFBSUMsV0FBVyxDQUFDO0lBRWhCLDRCQUE0QjtJQUM1Qix5QkFBeUI7SUFDekIsSUFBSUMscUJBQXFCO0lBRXpCLDJCQUEyQjtJQUMzQixJQUFJQyxpQkFBaUI7UUFDbkIsY0FBYztRQUNkLFVBQVU7SUFDWjtJQUVBLElBQUlDLFVBQVVDLE9BQU9DLE1BQU0sQ0FBQyxDQUFDLEdBQUdIO0lBRWhDLHNDQUFzQztJQUN0QyxvREFBb0Q7SUFDcEQsZUFBZTtJQUNmLElBQUlJLDBCQUEwQjtRQUM1QjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFFRCx3Q0FBd0M7SUFDeEMsSUFBSUMsMEJBQTBCO1FBQzVCO1FBQ0E7UUFDQTtLQUNEO0lBRUQsWUFBWTtJQUNaLElBQUlDLFdBQVc7SUFDZix3REFBd0Q7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T0FBTztpQkFDSixJQUFJekgsV0FDUHlILE9BQU87aUJBRVBBLE9BQU87WUFFVHZJLEtBQUs0RixhQUFhLENBQUMyQztZQUVuQixnRUFBZ0U7WUFDaEV2SSxLQUFLNEYsYUFBYSxDQUFDO1FBQ3JCO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRfZ2FtZS8uL25vZGVfbW9kdWxlcy94bWxodHRwcmVxdWVzdC1zc2wvbGliL1hNTEh0dHBSZXF1ZXN0LmpzP2Q0ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBXcmFwcGVyIGZvciBidWlsdC1pbiBodHRwLmpzIHRvIGVtdWxhdGUgdGhlIGJyb3dzZXIgWE1MSHR0cFJlcXVlc3Qgb2JqZWN0LlxuICpcbiAqIFRoaXMgY2FuIGJlIHVzZWQgd2l0aCBKUyBkZXNpZ25lZCBmb3IgYnJvd3NlcnMgdG8gaW1wcm92ZSByZXVzZSBvZiBjb2RlIGFuZFxuICogYWxsb3cgdGhlIHVzZSBvZiBleGlzdGluZyBsaWJyYXJpZXMuXG4gKlxuICogVXNhZ2U6IGluY2x1ZGUoXCJYTUxIdHRwUmVxdWVzdC5qc1wiKSBhbmQgdXNlIFhNTEh0dHBSZXF1ZXN0IHBlciBXM0Mgc3BlY3MuXG4gKlxuICogQGF1dGhvciBEYW4gRGVGZWxpcHBpIDxkYW5AZHJpdmVyZGFuLmNvbT5cbiAqIEBjb250cmlidXRvciBEYXZpZCBFbGxpcyA8ZC5mLmVsbGlzQGllZWUub3JnPlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBVcmwgPSByZXF1aXJlKCd1cmwnKTtcbnZhciBzcGF3biA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKS5zcGF3bjtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFhNTEh0dHBSZXF1ZXN0O1xuXG4vLyBiYWNrd2FyZHMtY29tcGF0XG5YTUxIdHRwUmVxdWVzdC5YTUxIdHRwUmVxdWVzdCA9IFhNTEh0dHBSZXF1ZXN0O1xuXG4vKipcbiAqIGBYTUxIdHRwUmVxdWVzdGAgY29uc3RydWN0b3IuXG4gKlxuICogU3VwcG9ydGVkIG9wdGlvbnMgZm9yIHRoZSBgb3B0c2Agb2JqZWN0IGFyZTpcbiAqXG4gKiAgLSBgYWdlbnRgOiBBbiBodHRwLkFnZW50IGluc3RhbmNlOyBodHRwLmdsb2JhbEFnZW50IG1heSBiZSB1c2VkOyBpZiAndW5kZWZpbmVkJywgYWdlbnQgdXNhZ2UgaXMgZGlzYWJsZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBvcHRpb25hbCBcIm9wdGlvbnNcIiBvYmplY3RcbiAqL1xuXG5mdW5jdGlvbiBYTUxIdHRwUmVxdWVzdChvcHRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIC8qKlxuICAgKiBQcml2YXRlIHZhcmlhYmxlc1xuICAgKi9cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbiAgdmFyIGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKTtcblxuICAvLyBIb2xkcyBodHRwLmpzIG9iamVjdHNcbiAgdmFyIHJlcXVlc3Q7XG4gIHZhciByZXNwb25zZTtcblxuICAvLyBSZXF1ZXN0IHNldHRpbmdzXG4gIHZhciBzZXR0aW5ncyA9IHt9O1xuXG4gIC8vIERpc2FibGUgaGVhZGVyIGJsYWNrbGlzdC5cbiAgLy8gTm90IHBhcnQgb2YgWEhSIHNwZWNzLlxuICB2YXIgZGlzYWJsZUhlYWRlckNoZWNrID0gZmFsc2U7XG5cbiAgLy8gU2V0IHNvbWUgZGVmYXVsdCBoZWFkZXJzXG4gIHZhciBkZWZhdWx0SGVhZGVycyA9IHtcbiAgICBcIlVzZXItQWdlbnRcIjogXCJub2RlLVhNTEh0dHBSZXF1ZXN0XCIsXG4gICAgXCJBY2NlcHRcIjogXCIqLypcIlxuICB9O1xuXG4gIHZhciBoZWFkZXJzID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdEhlYWRlcnMpO1xuXG4gIC8vIFRoZXNlIGhlYWRlcnMgYXJlIG5vdCB1c2VyIHNldGFibGUuXG4gIC8vIFRoZSBmb2xsb3dpbmcgYXJlIGFsbG93ZWQgYnV0IGJhbm5lZCBpbiB0aGUgc3BlYzpcbiAgLy8gKiB1c2VyLWFnZW50XG4gIHZhciBmb3JiaWRkZW5SZXF1ZXN0SGVhZGVycyA9IFtcbiAgICBcImFjY2VwdC1jaGFyc2V0XCIsXG4gICAgXCJhY2NlcHQtZW5jb2RpbmdcIixcbiAgICBcImFjY2Vzcy1jb250cm9sLXJlcXVlc3QtaGVhZGVyc1wiLFxuICAgIFwiYWNjZXNzLWNvbnRyb2wtcmVxdWVzdC1tZXRob2RcIixcbiAgICBcImNvbm5lY3Rpb25cIixcbiAgICBcImNvbnRlbnQtbGVuZ3RoXCIsXG4gICAgXCJjb250ZW50LXRyYW5zZmVyLWVuY29kaW5nXCIsXG4gICAgXCJjb29raWVcIixcbiAgICBcImNvb2tpZTJcIixcbiAgICBcImRhdGVcIixcbiAgICBcImV4cGVjdFwiLFxuICAgIFwiaG9zdFwiLFxuICAgIFwia2VlcC1hbGl2ZVwiLFxuICAgIFwib3JpZ2luXCIsXG4gICAgXCJyZWZlcmVyXCIsXG4gICAgXCJ0ZVwiLFxuICAgIFwidHJhaWxlclwiLFxuICAgIFwidHJhbnNmZXItZW5jb2RpbmdcIixcbiAgICBcInVwZ3JhZGVcIixcbiAgICBcInZpYVwiXG4gIF07XG5cbiAgLy8gVGhlc2UgcmVxdWVzdCBtZXRob2RzIGFyZSBub3QgYWxsb3dlZFxuICB2YXIgZm9yYmlkZGVuUmVxdWVzdE1ldGhvZHMgPSBbXG4gICAgXCJUUkFDRVwiLFxuICAgIFwiVFJBQ0tcIixcbiAgICBcIkNPTk5FQ1RcIlxuICBdO1xuXG4gIC8vIFNlbmQgZmxhZ1xuICB2YXIgc2VuZEZsYWcgPSBmYWxzZTtcbiAgLy8gRXJyb3IgZmxhZywgdXNlZCB3aGVuIGVycm9ycyBvY2N1ciBvciBhYm9ydCBpcyBjYWxsZWRcbiAgdmFyIGVycm9yRmxhZyA9IGZhbHNlO1xuICB2YXIgYWJvcnRlZEZsYWcgPSBmYWxzZTtcblxuICAvLyBFdmVudCBsaXN0ZW5lcnNcbiAgdmFyIGxpc3RlbmVycyA9IHt9O1xuXG4gIC8qKlxuICAgKiBDb25zdGFudHNcbiAgICovXG5cbiAgdGhpcy5VTlNFTlQgPSAwO1xuICB0aGlzLk9QRU5FRCA9IDE7XG4gIHRoaXMuSEVBREVSU19SRUNFSVZFRCA9IDI7XG4gIHRoaXMuTE9BRElORyA9IDM7XG4gIHRoaXMuRE9ORSA9IDQ7XG5cbiAgLyoqXG4gICAqIFB1YmxpYyB2YXJzXG4gICAqL1xuXG4gIC8vIEN1cnJlbnQgc3RhdGVcbiAgdGhpcy5yZWFkeVN0YXRlID0gdGhpcy5VTlNFTlQ7XG5cbiAgLy8gZGVmYXVsdCByZWFkeSBzdGF0ZSBjaGFuZ2UgaGFuZGxlciBpbiBjYXNlIG9uZSBpcyBub3Qgc2V0IG9yIGlzIHNldCBsYXRlXG4gIHRoaXMub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuICAvLyBSZXN1bHQgJiByZXNwb25zZVxuICB0aGlzLnJlc3BvbnNlVGV4dCA9IFwiXCI7XG4gIHRoaXMucmVzcG9uc2VYTUwgPSBcIlwiO1xuICB0aGlzLnN0YXR1cyA9IG51bGw7XG4gIHRoaXMuc3RhdHVzVGV4dCA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFByaXZhdGUgbWV0aG9kc1xuICAgKi9cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIHNwZWNpZmllZCBoZWFkZXIgaXMgYWxsb3dlZC5cbiAgICpcbiAgICogQHBhcmFtIHN0cmluZyBoZWFkZXIgSGVhZGVyIHRvIHZhbGlkYXRlXG4gICAqIEByZXR1cm4gYm9vbGVhbiBGYWxzZSBpZiBub3QgYWxsb3dlZCwgb3RoZXJ3aXNlIHRydWVcbiAgICovXG4gIHZhciBpc0FsbG93ZWRIdHRwSGVhZGVyID0gZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgcmV0dXJuIGRpc2FibGVIZWFkZXJDaGVjayB8fCAoaGVhZGVyICYmIGZvcmJpZGRlblJlcXVlc3RIZWFkZXJzLmluZGV4T2YoaGVhZGVyLnRvTG93ZXJDYXNlKCkpID09PSAtMSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBzcGVjaWZpZWQgbWV0aG9kIGlzIGFsbG93ZWQuXG4gICAqXG4gICAqIEBwYXJhbSBzdHJpbmcgbWV0aG9kIFJlcXVlc3QgbWV0aG9kIHRvIHZhbGlkYXRlXG4gICAqIEByZXR1cm4gYm9vbGVhbiBGYWxzZSBpZiBub3QgYWxsb3dlZCwgb3RoZXJ3aXNlIHRydWVcbiAgICovXG4gIHZhciBpc0FsbG93ZWRIdHRwTWV0aG9kID0gZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgcmV0dXJuIChtZXRob2QgJiYgZm9yYmlkZGVuUmVxdWVzdE1ldGhvZHMuaW5kZXhPZihtZXRob2QpID09PSAtMSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBtZXRob2RzXG4gICAqL1xuXG4gIC8qKlxuICAgKiBPcGVuIHRoZSBjb25uZWN0aW9uLiBDdXJyZW50bHkgc3VwcG9ydHMgbG9jYWwgc2VydmVyIHJlcXVlc3RzLlxuICAgKlxuICAgKiBAcGFyYW0gc3RyaW5nIG1ldGhvZCBDb25uZWN0aW9uIG1ldGhvZCAoZWcgR0VULCBQT1NUKVxuICAgKiBAcGFyYW0gc3RyaW5nIHVybCBVUkwgZm9yIHRoZSBjb25uZWN0aW9uLlxuICAgKiBAcGFyYW0gYm9vbGVhbiBhc3luYyBBc3luY2hyb25vdXMgY29ubmVjdGlvbi4gRGVmYXVsdCBpcyB0cnVlLlxuICAgKiBAcGFyYW0gc3RyaW5nIHVzZXIgVXNlcm5hbWUgZm9yIGJhc2ljIGF1dGhlbnRpY2F0aW9uIChvcHRpb25hbClcbiAgICogQHBhcmFtIHN0cmluZyBwYXNzd29yZCBQYXNzd29yZCBmb3IgYmFzaWMgYXV0aGVudGljYXRpb24gKG9wdGlvbmFsKVxuICAgKi9cbiAgdGhpcy5vcGVuID0gZnVuY3Rpb24obWV0aG9kLCB1cmwsIGFzeW5jLCB1c2VyLCBwYXNzd29yZCkge1xuICAgIHRoaXMuYWJvcnQoKTtcbiAgICBlcnJvckZsYWcgPSBmYWxzZTtcbiAgICBhYm9ydGVkRmxhZyA9IGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgZm9yIHZhbGlkIHJlcXVlc3QgbWV0aG9kXG4gICAgaWYgKCFpc0FsbG93ZWRIdHRwTWV0aG9kKG1ldGhvZCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlNlY3VyaXR5RXJyb3I6IFJlcXVlc3QgbWV0aG9kIG5vdCBhbGxvd2VkXCIpO1xuICAgIH1cblxuICAgIHNldHRpbmdzID0ge1xuICAgICAgXCJtZXRob2RcIjogbWV0aG9kLFxuICAgICAgXCJ1cmxcIjogdXJsLnRvU3RyaW5nKCksXG4gICAgICBcImFzeW5jXCI6ICh0eXBlb2YgYXN5bmMgIT09IFwiYm9vbGVhblwiID8gdHJ1ZSA6IGFzeW5jKSxcbiAgICAgIFwidXNlclwiOiB1c2VyIHx8IG51bGwsXG4gICAgICBcInBhc3N3b3JkXCI6IHBhc3N3b3JkIHx8IG51bGxcbiAgICB9O1xuXG4gICAgc2V0U3RhdGUodGhpcy5PUEVORUQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEaXNhYmxlcyBvciBlbmFibGVzIGlzQWxsb3dlZEh0dHBIZWFkZXIoKSBjaGVjayB0aGUgcmVxdWVzdC4gRW5hYmxlZCBieSBkZWZhdWx0LlxuICAgKiBUaGlzIGRvZXMgbm90IGNvbmZvcm0gdG8gdGhlIFczQyBzcGVjLlxuICAgKlxuICAgKiBAcGFyYW0gYm9vbGVhbiBzdGF0ZSBFbmFibGUgb3IgZGlzYWJsZSBoZWFkZXIgY2hlY2tpbmcuXG4gICAqL1xuICB0aGlzLnNldERpc2FibGVIZWFkZXJDaGVjayA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgZGlzYWJsZUhlYWRlckNoZWNrID0gc3RhdGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHMgYSBoZWFkZXIgZm9yIHRoZSByZXF1ZXN0LlxuICAgKlxuICAgKiBAcGFyYW0gc3RyaW5nIGhlYWRlciBIZWFkZXIgbmFtZVxuICAgKiBAcGFyYW0gc3RyaW5nIHZhbHVlIEhlYWRlciB2YWx1ZVxuICAgKiBAcmV0dXJuIGJvb2xlYW4gSGVhZGVyIGFkZGVkXG4gICAqL1xuICB0aGlzLnNldFJlcXVlc3RIZWFkZXIgPSBmdW5jdGlvbihoZWFkZXIsIHZhbHVlKSB7XG4gICAgaWYgKHRoaXMucmVhZHlTdGF0ZSAhPSB0aGlzLk9QRU5FRCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSU5WQUxJRF9TVEFURV9FUlI6IHNldFJlcXVlc3RIZWFkZXIgY2FuIG9ubHkgYmUgY2FsbGVkIHdoZW4gc3RhdGUgaXMgT1BFTlwiKTtcbiAgICB9XG4gICAgaWYgKCFpc0FsbG93ZWRIdHRwSGVhZGVyKGhlYWRlcikpIHtcbiAgICAgIGNvbnNvbGUud2FybignUmVmdXNlZCB0byBzZXQgdW5zYWZlIGhlYWRlciBcIicgKyBoZWFkZXIgKyAnXCInKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHNlbmRGbGFnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJTlZBTElEX1NUQVRFX0VSUjogc2VuZCBmbGFnIGlzIHRydWVcIik7XG4gICAgfVxuICAgIGhlYWRlcnNbaGVhZGVyXSA9IHZhbHVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXRzIGEgaGVhZGVyIGZyb20gdGhlIHNlcnZlciByZXNwb25zZS5cbiAgICpcbiAgICogQHBhcmFtIHN0cmluZyBoZWFkZXIgTmFtZSBvZiBoZWFkZXIgdG8gZ2V0LlxuICAgKiBAcmV0dXJuIHN0cmluZyBUZXh0IG9mIHRoZSBoZWFkZXIgb3IgbnVsbCBpZiBpdCBkb2Vzbid0IGV4aXN0LlxuICAgKi9cbiAgdGhpcy5nZXRSZXNwb25zZUhlYWRlciA9IGZ1bmN0aW9uKGhlYWRlcikge1xuICAgIGlmICh0eXBlb2YgaGVhZGVyID09PSBcInN0cmluZ1wiXG4gICAgICAmJiB0aGlzLnJlYWR5U3RhdGUgPiB0aGlzLk9QRU5FRFxuICAgICAgJiYgcmVzcG9uc2UuaGVhZGVyc1toZWFkZXIudG9Mb3dlckNhc2UoKV1cbiAgICAgICYmICFlcnJvckZsYWdcbiAgICApIHtcbiAgICAgIHJldHVybiByZXNwb25zZS5oZWFkZXJzW2hlYWRlci50b0xvd2VyQ2FzZSgpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICAvKipcbiAgICogR2V0cyBhbGwgdGhlIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAqXG4gICAqIEByZXR1cm4gc3RyaW5nIEEgc3RyaW5nIHdpdGggYWxsIHJlc3BvbnNlIGhlYWRlcnMgc2VwYXJhdGVkIGJ5IENSK0xGXG4gICAqL1xuICB0aGlzLmdldEFsbFJlc3BvbnNlSGVhZGVycyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPCB0aGlzLkhFQURFUlNfUkVDRUlWRUQgfHwgZXJyb3JGbGFnKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IFwiXCI7XG5cbiAgICBmb3IgKHZhciBpIGluIHJlc3BvbnNlLmhlYWRlcnMpIHtcbiAgICAgIC8vIENvb2tpZSBoZWFkZXJzIGFyZSBleGNsdWRlZFxuICAgICAgaWYgKGkgIT09IFwic2V0LWNvb2tpZVwiICYmIGkgIT09IFwic2V0LWNvb2tpZTJcIikge1xuICAgICAgICByZXN1bHQgKz0gaSArIFwiOiBcIiArIHJlc3BvbnNlLmhlYWRlcnNbaV0gKyBcIlxcclxcblwiO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0LnN1YnN0cigwLCByZXN1bHQubGVuZ3RoIC0gMik7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldHMgYSByZXF1ZXN0IGhlYWRlclxuICAgKlxuICAgKiBAcGFyYW0gc3RyaW5nIG5hbWUgTmFtZSBvZiBoZWFkZXIgdG8gZ2V0XG4gICAqIEByZXR1cm4gc3RyaW5nIFJldHVybnMgdGhlIHJlcXVlc3QgaGVhZGVyIG9yIGVtcHR5IHN0cmluZyBpZiBub3Qgc2V0XG4gICAqL1xuICB0aGlzLmdldFJlcXVlc3RIZWFkZXIgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgLy8gQFRPRE8gTWFrZSB0aGlzIGNhc2UgaW5zZW5zaXRpdmVcbiAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIgJiYgaGVhZGVyc1tuYW1lXSkge1xuICAgICAgcmV0dXJuIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiXCI7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNlbmRzIHRoZSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIEBwYXJhbSBzdHJpbmcgZGF0YSBPcHRpb25hbCBkYXRhIHRvIHNlbmQgYXMgcmVxdWVzdCBib2R5LlxuICAgKi9cbiAgdGhpcy5zZW5kID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgIT0gdGhpcy5PUEVORUQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIklOVkFMSURfU1RBVEVfRVJSOiBjb25uZWN0aW9uIG11c3QgYmUgb3BlbmVkIGJlZm9yZSBzZW5kKCkgaXMgY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIGlmIChzZW5kRmxhZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSU5WQUxJRF9TVEFURV9FUlI6IHNlbmQgaGFzIGFscmVhZHkgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgdmFyIHNzbCA9IGZhbHNlLCBsb2NhbCA9IGZhbHNlO1xuICAgIHZhciB1cmwgPSBVcmwucGFyc2Uoc2V0dGluZ3MudXJsKTtcbiAgICB2YXIgaG9zdDtcbiAgICAvLyBEZXRlcm1pbmUgdGhlIHNlcnZlclxuICAgIHN3aXRjaCAodXJsLnByb3RvY29sKSB7XG4gICAgICBjYXNlICdodHRwczonOlxuICAgICAgICBzc2wgPSB0cnVlO1xuICAgICAgICAvLyBTU0wgJiBub24tU1NMIGJvdGggbmVlZCBob3N0LCBubyBicmVhayBoZXJlLlxuICAgICAgY2FzZSAnaHR0cDonOlxuICAgICAgICBob3N0ID0gdXJsLmhvc3RuYW1lO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZmlsZTonOlxuICAgICAgICBsb2NhbCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgIGNhc2UgJyc6XG4gICAgICAgIGhvc3QgPSBcImxvY2FsaG9zdFwiO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvdG9jb2wgbm90IHN1cHBvcnRlZC5cIik7XG4gICAgfVxuXG4gICAgLy8gTG9hZCBmaWxlcyBvZmYgdGhlIGxvY2FsIGZpbGVzeXN0ZW0gKGZpbGU6Ly8pXG4gICAgaWYgKGxvY2FsKSB7XG4gICAgICBpZiAoc2V0dGluZ3MubWV0aG9kICE9PSBcIkdFVFwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlhNTEh0dHBSZXF1ZXN0OiBPbmx5IEdFVCBtZXRob2QgaXMgc3VwcG9ydGVkXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2V0dGluZ3MuYXN5bmMpIHtcbiAgICAgICAgZnMucmVhZEZpbGUodW5lc2NhcGUodXJsLnBhdGhuYW1lKSwgJ3V0ZjgnLCBmdW5jdGlvbihlcnJvciwgZGF0YSkge1xuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgc2VsZi5oYW5kbGVFcnJvcihlcnJvciwgZXJyb3IuZXJybm8gfHwgLTEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLnN0YXR1cyA9IDIwMDtcbiAgICAgICAgICAgIHNlbGYucmVzcG9uc2VUZXh0ID0gZGF0YTtcbiAgICAgICAgICAgIHNldFN0YXRlKHNlbGYuRE9ORSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5yZXNwb25zZVRleHQgPSBmcy5yZWFkRmlsZVN5bmModW5lc2NhcGUodXJsLnBhdGhuYW1lKSwgJ3V0ZjgnKTtcbiAgICAgICAgICB0aGlzLnN0YXR1cyA9IDIwMDtcbiAgICAgICAgICBzZXRTdGF0ZShzZWxmLkRPTkUpO1xuICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGUsIGUuZXJybm8gfHwgLTEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBEZWZhdWx0IHRvIHBvcnQgODAuIElmIGFjY2Vzc2luZyBsb2NhbGhvc3Qgb24gYW5vdGhlciBwb3J0IGJlIHN1cmVcbiAgICAvLyB0byB1c2UgaHR0cDovL2xvY2FsaG9zdDpwb3J0L3BhdGhcbiAgICB2YXIgcG9ydCA9IHVybC5wb3J0IHx8IChzc2wgPyA0NDMgOiA4MCk7XG4gICAgLy8gQWRkIHF1ZXJ5IHN0cmluZyBpZiBvbmUgaXMgdXNlZFxuICAgIHZhciB1cmkgPSB1cmwucGF0aG5hbWUgKyAodXJsLnNlYXJjaCA/IHVybC5zZWFyY2ggOiAnJyk7XG5cbiAgICAvLyBTZXQgdGhlIEhvc3QgaGVhZGVyIG9yIHRoZSBzZXJ2ZXIgbWF5IHJlamVjdCB0aGUgcmVxdWVzdFxuICAgIGhlYWRlcnNbXCJIb3N0XCJdID0gaG9zdDtcbiAgICBpZiAoISgoc3NsICYmIHBvcnQgPT09IDQ0MykgfHwgcG9ydCA9PT0gODApKSB7XG4gICAgICBoZWFkZXJzW1wiSG9zdFwiXSArPSAnOicgKyB1cmwucG9ydDtcbiAgICB9XG5cbiAgICAvLyBTZXQgQmFzaWMgQXV0aCBpZiBuZWNlc3NhcnlcbiAgICBpZiAoc2V0dGluZ3MudXNlcikge1xuICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5wYXNzd29yZCA9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHNldHRpbmdzLnBhc3N3b3JkID0gXCJcIjtcbiAgICAgIH1cbiAgICAgIHZhciBhdXRoQnVmID0gbmV3IEJ1ZmZlcihzZXR0aW5ncy51c2VyICsgXCI6XCIgKyBzZXR0aW5ncy5wYXNzd29yZCk7XG4gICAgICBoZWFkZXJzW1wiQXV0aG9yaXphdGlvblwiXSA9IFwiQmFzaWMgXCIgKyBhdXRoQnVmLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xuICAgIH1cblxuICAgIC8vIFNldCBjb250ZW50IGxlbmd0aCBoZWFkZXJcbiAgICBpZiAoc2V0dGluZ3MubWV0aG9kID09PSBcIkdFVFwiIHx8IHNldHRpbmdzLm1ldGhvZCA9PT0gXCJIRUFEXCIpIHtcbiAgICAgIGRhdGEgPSBudWxsO1xuICAgIH0gZWxzZSBpZiAoZGF0YSkge1xuICAgICAgaGVhZGVyc1tcIkNvbnRlbnQtTGVuZ3RoXCJdID0gQnVmZmVyLmlzQnVmZmVyKGRhdGEpID8gZGF0YS5sZW5ndGggOiBCdWZmZXIuYnl0ZUxlbmd0aChkYXRhKTtcblxuICAgICAgaWYgKCFoZWFkZXJzW1wiQ29udGVudC1UeXBlXCJdKSB7XG4gICAgICAgIGhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl0gPSBcInRleHQvcGxhaW47Y2hhcnNldD1VVEYtOFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2V0dGluZ3MubWV0aG9kID09PSBcIlBPU1RcIikge1xuICAgICAgLy8gRm9yIGEgcG9zdCB3aXRoIG5vIGRhdGEgc2V0IENvbnRlbnQtTGVuZ3RoOiAwLlxuICAgICAgLy8gVGhpcyBpcyByZXF1aXJlZCBieSBidWdneSBzZXJ2ZXJzIHRoYXQgZG9uJ3QgbWVldCB0aGUgc3BlY3MuXG4gICAgICBoZWFkZXJzW1wiQ29udGVudC1MZW5ndGhcIl0gPSAwO1xuICAgIH1cblxuICAgIHZhciBhZ2VudCA9IG9wdHMuYWdlbnQgfHwgZmFsc2U7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBob3N0OiBob3N0LFxuICAgICAgcG9ydDogcG9ydCxcbiAgICAgIHBhdGg6IHVyaSxcbiAgICAgIG1ldGhvZDogc2V0dGluZ3MubWV0aG9kLFxuICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgIGFnZW50OiBhZ2VudFxuICAgIH07XG5cbiAgICBpZiAoc3NsKSB7XG4gICAgICBvcHRpb25zLnBmeCA9IG9wdHMucGZ4O1xuICAgICAgb3B0aW9ucy5rZXkgPSBvcHRzLmtleTtcbiAgICAgIG9wdGlvbnMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZTtcbiAgICAgIG9wdGlvbnMuY2VydCA9IG9wdHMuY2VydDtcbiAgICAgIG9wdGlvbnMuY2EgPSBvcHRzLmNhO1xuICAgICAgb3B0aW9ucy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzO1xuICAgICAgb3B0aW9ucy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9PT0gZmFsc2UgPyBmYWxzZSA6IHRydWU7XG4gICAgfVxuXG4gICAgLy8gUmVzZXQgZXJyb3IgZmxhZ1xuICAgIGVycm9yRmxhZyA9IGZhbHNlO1xuICAgIC8vIEhhbmRsZSBhc3luYyByZXF1ZXN0c1xuICAgIGlmIChzZXR0aW5ncy5hc3luYykge1xuICAgICAgLy8gVXNlIHRoZSBwcm9wZXIgcHJvdG9jb2xcbiAgICAgIHZhciBkb1JlcXVlc3QgPSBzc2wgPyBodHRwcy5yZXF1ZXN0IDogaHR0cC5yZXF1ZXN0O1xuXG4gICAgICAvLyBSZXF1ZXN0IGlzIGJlaW5nIHNlbnQsIHNldCBzZW5kIGZsYWdcbiAgICAgIHNlbmRGbGFnID0gdHJ1ZTtcblxuICAgICAgLy8gQXMgcGVyIHNwZWMsIHRoaXMgaXMgY2FsbGVkIGhlcmUgZm9yIGhpc3RvcmljYWwgcmVhc29ucy5cbiAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudChcInJlYWR5c3RhdGVjaGFuZ2VcIik7XG5cbiAgICAgIC8vIEhhbmRsZXIgZm9yIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGFuZGxlciA9IGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgLy8gU2V0IHJlc3BvbnNlIHZhciB0byB0aGUgcmVzcG9uc2Ugd2UgZ290IGJhY2tcbiAgICAgICAgLy8gVGhpcyBpcyBzbyBpdCByZW1haW5zIGFjY2Vzc2FibGUgb3V0c2lkZSB0aGlzIHNjb3BlXG4gICAgICAgIHJlc3BvbnNlID0gcmVzcDtcbiAgICAgICAgLy8gQ2hlY2sgZm9yIHJlZGlyZWN0XG4gICAgICAgIC8vIEBUT0RPIFByZXZlbnQgbG9vcGVkIHJlZGlyZWN0c1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gMzAyIHx8IHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDMwMyB8fCByZXNwb25zZS5zdGF0dXNDb2RlID09PSAzMDcpIHtcbiAgICAgICAgICAvLyBDaGFuZ2UgVVJMIHRvIHRoZSByZWRpcmVjdCBsb2NhdGlvblxuICAgICAgICAgIHNldHRpbmdzLnVybCA9IHJlc3BvbnNlLmhlYWRlcnMubG9jYXRpb247XG4gICAgICAgICAgdmFyIHVybCA9IFVybC5wYXJzZShzZXR0aW5ncy51cmwpO1xuICAgICAgICAgIC8vIFNldCBob3N0IHZhciBpbiBjYXNlIGl0J3MgdXNlZCBsYXRlclxuICAgICAgICAgIGhvc3QgPSB1cmwuaG9zdG5hbWU7XG4gICAgICAgICAgLy8gT3B0aW9ucyBmb3IgdGhlIG5ldyByZXF1ZXN0XG4gICAgICAgICAgdmFyIG5ld09wdGlvbnMgPSB7XG4gICAgICAgICAgICBob3N0bmFtZTogdXJsLmhvc3RuYW1lLFxuICAgICAgICAgICAgcG9ydDogdXJsLnBvcnQsXG4gICAgICAgICAgICBwYXRoOiB1cmwucGF0aCxcbiAgICAgICAgICAgIG1ldGhvZDogcmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gMzAzID8gJ0dFVCcgOiBzZXR0aW5ncy5tZXRob2QsXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChzc2wpIHtcbiAgICAgICAgICAgIG5ld09wdGlvbnMucGZ4ID0gb3B0cy5wZng7XG4gICAgICAgICAgICBuZXdPcHRpb25zLmtleSA9IG9wdHMua2V5O1xuICAgICAgICAgICAgbmV3T3B0aW9ucy5wYXNzcGhyYXNlID0gb3B0cy5wYXNzcGhyYXNlO1xuICAgICAgICAgICAgbmV3T3B0aW9ucy5jZXJ0ID0gb3B0cy5jZXJ0O1xuICAgICAgICAgICAgbmV3T3B0aW9ucy5jYSA9IG9wdHMuY2E7XG4gICAgICAgICAgICBuZXdPcHRpb25zLmNpcGhlcnMgPSBvcHRzLmNpcGhlcnM7XG4gICAgICAgICAgICBuZXdPcHRpb25zLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBJc3N1ZSB0aGUgbmV3IHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0ID0gZG9SZXF1ZXN0KG5ld09wdGlvbnMsIHJlc3BvbnNlSGFuZGxlcikub24oJ2Vycm9yJywgZXJyb3JIYW5kbGVyKTtcbiAgICAgICAgICByZXF1ZXN0LmVuZCgpO1xuICAgICAgICAgIC8vIEBUT0RPIENoZWNrIGlmIGFuIFhIUiBldmVudCBuZWVkcyB0byBiZSBmaXJlZCBoZXJlXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnNldEVuY29kaW5nKSB7XG4gICAgICAgICAgcmVzcG9uc2Uuc2V0RW5jb2RpbmcoXCJ1dGY4XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0U3RhdGUoc2VsZi5IRUFERVJTX1JFQ0VJVkVEKTtcbiAgICAgICAgc2VsZi5zdGF0dXMgPSByZXNwb25zZS5zdGF0dXNDb2RlO1xuXG4gICAgICAgIHJlc3BvbnNlLm9uKCdkYXRhJywgZnVuY3Rpb24oY2h1bmspIHtcbiAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlcmUncyBzb21lIGRhdGFcbiAgICAgICAgICBpZiAoY2h1bmspIHtcbiAgICAgICAgICAgIHNlbGYucmVzcG9uc2VUZXh0ICs9IGNodW5rO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBEb24ndCBlbWl0IHN0YXRlIGNoYW5nZXMgaWYgdGhlIGNvbm5lY3Rpb24gaGFzIGJlZW4gYWJvcnRlZC5cbiAgICAgICAgICBpZiAoc2VuZEZsYWcpIHtcbiAgICAgICAgICAgIHNldFN0YXRlKHNlbGYuTE9BRElORyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXNwb25zZS5vbignZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHNlbmRGbGFnKSB7XG4gICAgICAgICAgICAvLyBUaGUgc2VuZEZsYWcgbmVlZHMgdG8gYmUgc2V0IGJlZm9yZSBzZXRTdGF0ZSBpcyBjYWxsZWQuICBPdGhlcndpc2UgaWYgd2UgYXJlIGNoYWluaW5nIGNhbGxiYWNrc1xuICAgICAgICAgICAgLy8gdGhlcmUgY2FuIGJlIGEgdGltaW5nIGlzc3VlICh0aGUgY2FsbGJhY2sgaXMgY2FsbGVkIGFuZCBhIG5ldyBjYWxsIGlzIG1hZGUgYmVmb3JlIHRoZSBmbGFnIGlzIHJlc2V0KS5cbiAgICAgICAgICAgIHNlbmRGbGFnID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBEaXNjYXJkIHRoZSAnZW5kJyBldmVudCBpZiB0aGUgY29ubmVjdGlvbiBoYXMgYmVlbiBhYm9ydGVkXG4gICAgICAgICAgICBzZXRTdGF0ZShzZWxmLkRPTkUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmVzcG9uc2Uub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICBzZWxmLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEVycm9yIGhhbmRsZXIgZm9yIHRoZSByZXF1ZXN0XG4gICAgICB2YXIgZXJyb3JIYW5kbGVyID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgc2VsZi5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICB9XG5cbiAgICAgIC8vIENyZWF0ZSB0aGUgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IGRvUmVxdWVzdChvcHRpb25zLCByZXNwb25zZUhhbmRsZXIpLm9uKCdlcnJvcicsIGVycm9ySGFuZGxlcik7XG5cbiAgICAgIGlmIChvcHRzLmF1dG9VbnJlZikge1xuICAgICAgICByZXF1ZXN0Lm9uKCdzb2NrZXQnLCAoc29ja2V0KSA9PiB7XG4gICAgICAgICAgc29ja2V0LnVucmVmKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBOb2RlIDAuNCBhbmQgbGF0ZXIgd29uJ3QgYWNjZXB0IGVtcHR5IGRhdGEuIE1ha2Ugc3VyZSBpdCdzIG5lZWRlZC5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIHJlcXVlc3Qud3JpdGUoZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3QuZW5kKCk7XG5cbiAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudChcImxvYWRzdGFydFwiKTtcbiAgICB9IGVsc2UgeyAvLyBTeW5jaHJvbm91c1xuICAgICAgLy8gQ3JlYXRlIGEgdGVtcG9yYXJ5IGZpbGUgZm9yIGNvbW11bmljYXRpb24gd2l0aCB0aGUgb3RoZXIgTm9kZSBwcm9jZXNzXG4gICAgICB2YXIgY29udGVudEZpbGUgPSBcIi5ub2RlLXhtbGh0dHByZXF1ZXN0LWNvbnRlbnQtXCIgKyBwcm9jZXNzLnBpZDtcbiAgICAgIHZhciBzeW5jRmlsZSA9IFwiLm5vZGUteG1saHR0cHJlcXVlc3Qtc3luYy1cIiArIHByb2Nlc3MucGlkO1xuICAgICAgZnMud3JpdGVGaWxlU3luYyhzeW5jRmlsZSwgXCJcIiwgXCJ1dGY4XCIpO1xuICAgICAgLy8gVGhlIGFzeW5jIHJlcXVlc3QgdGhlIG90aGVyIE5vZGUgcHJvY2VzcyBleGVjdXRlc1xuICAgICAgdmFyIGV4ZWNTdHJpbmcgPSBcInZhciBodHRwID0gcmVxdWlyZSgnaHR0cCcpLCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyksIGZzID0gcmVxdWlyZSgnZnMnKTtcIlxuICAgICAgICArIFwidmFyIGRvUmVxdWVzdCA9IGh0dHBcIiArIChzc2wgPyBcInNcIiA6IFwiXCIpICsgXCIucmVxdWVzdDtcIlxuICAgICAgICArIFwidmFyIG9wdGlvbnMgPSBcIiArIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpICsgXCI7XCJcbiAgICAgICAgKyBcInZhciByZXNwb25zZVRleHQgPSAnJztcIlxuICAgICAgICArIFwidmFyIHJlcSA9IGRvUmVxdWVzdChvcHRpb25zLCBmdW5jdGlvbihyZXNwb25zZSkge1wiXG4gICAgICAgICsgXCJyZXNwb25zZS5zZXRFbmNvZGluZygndXRmOCcpO1wiXG4gICAgICAgICsgXCJyZXNwb25zZS5vbignZGF0YScsIGZ1bmN0aW9uKGNodW5rKSB7XCJcbiAgICAgICAgKyBcIiAgcmVzcG9uc2VUZXh0ICs9IGNodW5rO1wiXG4gICAgICAgICsgXCJ9KTtcIlxuICAgICAgICArIFwicmVzcG9uc2Uub24oJ2VuZCcsIGZ1bmN0aW9uKCkge1wiXG4gICAgICAgICsgXCJmcy53cml0ZUZpbGVTeW5jKCdcIiArIGNvbnRlbnRGaWxlICsgXCInLCAnTk9ERS1YTUxIVFRQUkVRVUVTVC1TVEFUVVM6JyArIHJlc3BvbnNlLnN0YXR1c0NvZGUgKyAnLCcgKyByZXNwb25zZVRleHQsICd1dGY4Jyk7XCJcbiAgICAgICAgKyBcImZzLnVubGlua1N5bmMoJ1wiICsgc3luY0ZpbGUgKyBcIicpO1wiXG4gICAgICAgICsgXCJ9KTtcIlxuICAgICAgICArIFwicmVzcG9uc2Uub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyb3IpIHtcIlxuICAgICAgICArIFwiZnMud3JpdGVGaWxlU3luYygnXCIgKyBjb250ZW50RmlsZSArIFwiJywgJ05PREUtWE1MSFRUUFJFUVVFU1QtRVJST1I6JyArIEpTT04uc3RyaW5naWZ5KGVycm9yKSwgJ3V0ZjgnKTtcIlxuICAgICAgICArIFwiZnMudW5saW5rU3luYygnXCIgKyBzeW5jRmlsZSArIFwiJyk7XCJcbiAgICAgICAgKyBcIn0pO1wiXG4gICAgICAgICsgXCJ9KS5vbignZXJyb3InLCBmdW5jdGlvbihlcnJvcikge1wiXG4gICAgICAgICsgXCJmcy53cml0ZUZpbGVTeW5jKCdcIiArIGNvbnRlbnRGaWxlICsgXCInLCAnTk9ERS1YTUxIVFRQUkVRVUVTVC1FUlJPUjonICsgSlNPTi5zdHJpbmdpZnkoZXJyb3IpLCAndXRmOCcpO1wiXG4gICAgICAgICsgXCJmcy51bmxpbmtTeW5jKCdcIiArIHN5bmNGaWxlICsgXCInKTtcIlxuICAgICAgICArIFwifSk7XCJcbiAgICAgICAgKyAoZGF0YSA/IFwicmVxLndyaXRlKCdcIiArIEpTT04uc3RyaW5naWZ5KGRhdGEpLnNsaWNlKDEsLTEpLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKSArIFwiJyk7XCI6XCJcIilcbiAgICAgICAgKyBcInJlcS5lbmQoKTtcIjtcbiAgICAgIC8vIFN0YXJ0IHRoZSBvdGhlciBOb2RlIFByb2Nlc3MsIGV4ZWN1dGluZyB0aGlzIHN0cmluZ1xuICAgICAgdmFyIHN5bmNQcm9jID0gc3Bhd24ocHJvY2Vzcy5hcmd2WzBdLCBbXCItZVwiLCBleGVjU3RyaW5nXSk7XG4gICAgICB2YXIgc3RhdHVzVGV4dDtcbiAgICAgIHdoaWxlKGZzLmV4aXN0c1N5bmMoc3luY0ZpbGUpKSB7XG4gICAgICAgIC8vIFdhaXQgd2hpbGUgdGhlIHN5bmMgZmlsZSBpcyBlbXB0eVxuICAgICAgfVxuICAgICAgc2VsZi5yZXNwb25zZVRleHQgPSBmcy5yZWFkRmlsZVN5bmMoY29udGVudEZpbGUsICd1dGY4Jyk7XG4gICAgICAvLyBLaWxsIHRoZSBjaGlsZCBwcm9jZXNzIG9uY2UgdGhlIGZpbGUgaGFzIGRhdGFcbiAgICAgIHN5bmNQcm9jLnN0ZGluLmVuZCgpO1xuICAgICAgLy8gUmVtb3ZlIHRoZSB0ZW1wb3JhcnkgZmlsZVxuICAgICAgZnMudW5saW5rU3luYyhjb250ZW50RmlsZSk7XG4gICAgICBpZiAoc2VsZi5yZXNwb25zZVRleHQubWF0Y2goL15OT0RFLVhNTEhUVFBSRVFVRVNULUVSUk9SOi8pKSB7XG4gICAgICAgIC8vIElmIHRoZSBmaWxlIHJldHVybmVkIGFuIGVycm9yLCBoYW5kbGUgaXRcbiAgICAgICAgdmFyIGVycm9yT2JqID0gc2VsZi5yZXNwb25zZVRleHQucmVwbGFjZSgvXk5PREUtWE1MSFRUUFJFUVVFU1QtRVJST1I6LywgXCJcIik7XG4gICAgICAgIHNlbGYuaGFuZGxlRXJyb3IoZXJyb3JPYmosIDUwMyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiB0aGUgZmlsZSByZXR1cm5lZCBva2F5LCBwYXJzZSBpdHMgZGF0YSBhbmQgbW92ZSB0byB0aGUgRE9ORSBzdGF0ZVxuICAgICAgICBzZWxmLnN0YXR1cyA9IHNlbGYucmVzcG9uc2VUZXh0LnJlcGxhY2UoL15OT0RFLVhNTEhUVFBSRVFVRVNULVNUQVRVUzooWzAtOV0qKSwuKi8sIFwiJDFcIik7XG4gICAgICAgIHNlbGYucmVzcG9uc2VUZXh0ID0gc2VsZi5yZXNwb25zZVRleHQucmVwbGFjZSgvXk5PREUtWE1MSFRUUFJFUVVFU1QtU1RBVFVTOlswLTldKiwoLiopLywgXCIkMVwiKTtcbiAgICAgICAgc2V0U3RhdGUoc2VsZi5ET05FKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGFuIGVycm9yIGlzIGVuY291bnRlcmVkIHRvIGRlYWwgd2l0aCBpdC5cbiAgICogQHBhcmFtICBzdGF0dXMgIHtudW1iZXJ9ICAgIEhUVFAgc3RhdHVzIGNvZGUgdG8gdXNlIHJhdGhlciB0aGFuIHRoZSBkZWZhdWx0ICgwKSBmb3IgWEhSIGVycm9ycy5cbiAgICovXG4gIHRoaXMuaGFuZGxlRXJyb3IgPSBmdW5jdGlvbihlcnJvciwgc3RhdHVzKSB7XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXMgfHwgMDtcbiAgICB0aGlzLnN0YXR1c1RleHQgPSBlcnJvcjtcbiAgICB0aGlzLnJlc3BvbnNlVGV4dCA9IGVycm9yLnN0YWNrO1xuICAgIGVycm9yRmxhZyA9IHRydWU7XG4gICAgc2V0U3RhdGUodGhpcy5ET05FKTtcbiAgfTtcblxuICAvKipcbiAgICogQWJvcnRzIGEgcmVxdWVzdC5cbiAgICovXG4gIHRoaXMuYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAocmVxdWVzdCkge1xuICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRIZWFkZXJzKTtcbiAgICB0aGlzLnJlc3BvbnNlVGV4dCA9IFwiXCI7XG4gICAgdGhpcy5yZXNwb25zZVhNTCA9IFwiXCI7XG5cbiAgICBlcnJvckZsYWcgPSBhYm9ydGVkRmxhZyA9IHRydWVcbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlICE9PSB0aGlzLlVOU0VOVFxuICAgICAgICAmJiAodGhpcy5yZWFkeVN0YXRlICE9PSB0aGlzLk9QRU5FRCB8fCBzZW5kRmxhZylcbiAgICAgICAgJiYgdGhpcy5yZWFkeVN0YXRlICE9PSB0aGlzLkRPTkUpIHtcbiAgICAgIHNlbmRGbGFnID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSh0aGlzLkRPTkUpO1xuICAgIH1cbiAgICB0aGlzLnJlYWR5U3RhdGUgPSB0aGlzLlVOU0VOVDtcbiAgfTtcblxuICAvKipcbiAgICogQWRkcyBhbiBldmVudCBsaXN0ZW5lci4gUHJlZmVycmVkIG1ldGhvZCBvZiBiaW5kaW5nIHRvIGV2ZW50cy5cbiAgICovXG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBjYWxsYmFjaykge1xuICAgIGlmICghKGV2ZW50IGluIGxpc3RlbmVycykpIHtcbiAgICAgIGxpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICB9XG4gICAgLy8gQ3VycmVudGx5IGFsbG93cyBkdXBsaWNhdGUgY2FsbGJhY2tzLiBTaG91bGQgaXQ/XG4gICAgbGlzdGVuZXJzW2V2ZW50XS5wdXNoKGNhbGxiYWNrKTtcbiAgfTtcblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGV2ZW50IGNhbGxiYWNrIHRoYXQgaGFzIGFscmVhZHkgYmVlbiBib3VuZC5cbiAgICogT25seSB3b3JrcyBvbiB0aGUgbWF0Y2hpbmcgZnVuY2l0b24sIGNhbm5vdCBiZSBhIGNvcHkuXG4gICAqL1xuICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgY2FsbGJhY2spIHtcbiAgICBpZiAoZXZlbnQgaW4gbGlzdGVuZXJzKSB7XG4gICAgICAvLyBGaWx0ZXIgd2lsbCByZXR1cm4gYSBuZXcgYXJyYXkgd2l0aCB0aGUgY2FsbGJhY2sgcmVtb3ZlZFxuICAgICAgbGlzdGVuZXJzW2V2ZW50XSA9IGxpc3RlbmVyc1tldmVudF0uZmlsdGVyKGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIHJldHVybiBldiAhPT0gY2FsbGJhY2s7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIGFueSBldmVudHMsIGluY2x1ZGluZyBib3RoIFwib25cIiBtZXRob2RzIGFuZCBldmVudHMgYXR0YWNoZWQgdXNpbmcgYWRkRXZlbnRMaXN0ZW5lci5cbiAgICovXG4gIHRoaXMuZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKHR5cGVvZiBzZWxmW1wib25cIiArIGV2ZW50XSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSB0aGlzLkRPTkUpXG4gICAgICAgIHNldEltbWVkaWF0ZShmdW5jdGlvbigpIHsgc2VsZltcIm9uXCIgKyBldmVudF0oKSB9KVxuICAgICAgZWxzZVxuICAgICAgICBzZWxmW1wib25cIiArIGV2ZW50XSgpXG4gICAgfVxuICAgIGlmIChldmVudCBpbiBsaXN0ZW5lcnMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBsaXN0ZW5lcnNbZXZlbnRdLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IHRoaXMuRE9ORSlcbiAgICAgICAgICBzZXRJbW1lZGlhdGUoZnVuY3Rpb24oKSB7IGxpc3RlbmVyc1tldmVudF1baV0uY2FsbChzZWxmKSB9KVxuICAgICAgICBlbHNlXG4gICAgICAgICAgbGlzdGVuZXJzW2V2ZW50XVtpXS5jYWxsKHNlbGYpXG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBDaGFuZ2VzIHJlYWR5U3RhdGUgYW5kIGNhbGxzIG9ucmVhZHlzdGF0ZWNoYW5nZS5cbiAgICpcbiAgICogQHBhcmFtIGludCBzdGF0ZSBOZXcgc3RhdGVcbiAgICovXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgaWYgKChzZWxmLnJlYWR5U3RhdGUgPT09IHN0YXRlKSB8fCAoc2VsZi5yZWFkeVN0YXRlID09PSBzZWxmLlVOU0VOVCAmJiBhYm9ydGVkRmxhZykpXG4gICAgICByZXR1cm5cblxuICAgIHNlbGYucmVhZHlTdGF0ZSA9IHN0YXRlO1xuXG4gICAgaWYgKHNldHRpbmdzLmFzeW5jIHx8IHNlbGYucmVhZHlTdGF0ZSA8IHNlbGYuT1BFTkVEIHx8IHNlbGYucmVhZHlTdGF0ZSA9PT0gc2VsZi5ET05FKSB7XG4gICAgICBzZWxmLmRpc3BhdGNoRXZlbnQoXCJyZWFkeXN0YXRlY2hhbmdlXCIpO1xuICAgIH1cblxuICAgIGlmIChzZWxmLnJlYWR5U3RhdGUgPT09IHNlbGYuRE9ORSkge1xuICAgICAgbGV0IGZpcmVcblxuICAgICAgaWYgKGFib3J0ZWRGbGFnKVxuICAgICAgICBmaXJlID0gXCJhYm9ydFwiXG4gICAgICBlbHNlIGlmIChlcnJvckZsYWcpXG4gICAgICAgIGZpcmUgPSBcImVycm9yXCJcbiAgICAgIGVsc2VcbiAgICAgICAgZmlyZSA9IFwibG9hZFwiXG5cbiAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudChmaXJlKVxuXG4gICAgICAvLyBAVE9ETyBmaWd1cmUgb3V0IEluc3BlY3Rvckluc3RydW1lbnRhdGlvbjo6ZGlkTG9hZFhIUihjb29raWUpXG4gICAgICBzZWxmLmRpc3BhdGNoRXZlbnQoXCJsb2FkZW5kXCIpO1xuICAgIH1cbiAgfTtcbn07XG4iXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwiVXJsIiwic3Bhd24iLCJtb2R1bGUiLCJleHBvcnRzIiwiWE1MSHR0cFJlcXVlc3QiLCJvcHRzIiwic2VsZiIsImh0dHAiLCJodHRwcyIsInJlcXVlc3QiLCJyZXNwb25zZSIsInNldHRpbmdzIiwiZGlzYWJsZUhlYWRlckNoZWNrIiwiZGVmYXVsdEhlYWRlcnMiLCJoZWFkZXJzIiwiT2JqZWN0IiwiYXNzaWduIiwiZm9yYmlkZGVuUmVxdWVzdEhlYWRlcnMiLCJmb3JiaWRkZW5SZXF1ZXN0TWV0aG9kcyIsInNlbmRGbGFnIiwiZXJyb3JGbGFnIiwiYWJvcnRlZEZsYWciLCJsaXN0ZW5lcnMiLCJVTlNFTlQiLCJPUEVORUQiLCJIRUFERVJTX1JFQ0VJVkVEIiwiTE9BRElORyIsIkRPTkUiLCJyZWFkeVN0YXRlIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUZXh0IiwicmVzcG9uc2VYTUwiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiaXNBbGxvd2VkSHR0cEhlYWRlciIsImhlYWRlciIsImluZGV4T2YiLCJ0b0xvd2VyQ2FzZSIsImlzQWxsb3dlZEh0dHBNZXRob2QiLCJtZXRob2QiLCJvcGVuIiwidXJsIiwiYXN5bmMiLCJ1c2VyIiwicGFzc3dvcmQiLCJhYm9ydCIsIkVycm9yIiwidG9TdHJpbmciLCJzZXRTdGF0ZSIsInNldERpc2FibGVIZWFkZXJDaGVjayIsInN0YXRlIiwic2V0UmVxdWVzdEhlYWRlciIsInZhbHVlIiwiY29uc29sZSIsIndhcm4iLCJnZXRSZXNwb25zZUhlYWRlciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3VsdCIsImkiLCJzdWJzdHIiLCJsZW5ndGgiLCJnZXRSZXF1ZXN0SGVhZGVyIiwibmFtZSIsInNlbmQiLCJkYXRhIiwic3NsIiwibG9jYWwiLCJwYXJzZSIsImhvc3QiLCJwcm90b2NvbCIsImhvc3RuYW1lIiwidW5kZWZpbmVkIiwicmVhZEZpbGUiLCJ1bmVzY2FwZSIsInBhdGhuYW1lIiwiZXJyb3IiLCJoYW5kbGVFcnJvciIsImVycm5vIiwicmVhZEZpbGVTeW5jIiwiZSIsInBvcnQiLCJ1cmkiLCJzZWFyY2giLCJhdXRoQnVmIiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJieXRlTGVuZ3RoIiwiYWdlbnQiLCJvcHRpb25zIiwicGF0aCIsInBmeCIsImtleSIsInBhc3NwaHJhc2UiLCJjZXJ0IiwiY2EiLCJjaXBoZXJzIiwicmVqZWN0VW5hdXRob3JpemVkIiwiZG9SZXF1ZXN0IiwiZGlzcGF0Y2hFdmVudCIsInJlc3BvbnNlSGFuZGxlciIsInJlc3AiLCJzdGF0dXNDb2RlIiwibG9jYXRpb24iLCJuZXdPcHRpb25zIiwib24iLCJlcnJvckhhbmRsZXIiLCJlbmQiLCJzZXRFbmNvZGluZyIsImNodW5rIiwiYXV0b1VucmVmIiwic29ja2V0IiwidW5yZWYiLCJ3cml0ZSIsImNvbnRlbnRGaWxlIiwicHJvY2VzcyIsInBpZCIsInN5bmNGaWxlIiwid3JpdGVGaWxlU3luYyIsImV4ZWNTdHJpbmciLCJKU09OIiwic3RyaW5naWZ5Iiwic2xpY2UiLCJyZXBsYWNlIiwic3luY1Byb2MiLCJhcmd2IiwiZXhpc3RzU3luYyIsInN0ZGluIiwidW5saW5rU3luYyIsIm1hdGNoIiwiZXJyb3JPYmoiLCJzdGFjayIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsImNhbGxiYWNrIiwicHVzaCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJmaWx0ZXIiLCJldiIsInNldEltbWVkaWF0ZSIsImxlbiIsImNhbGwiLCJmaXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xmlhttprequest-ssl/lib/XMLHttpRequest.js\n");

/***/ })

};
;