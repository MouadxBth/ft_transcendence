"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@socket.io";
exports.ids = ["vendor-chunks/@socket.io"];
exports.modules = {

/***/ "(ssr)/./node_modules/@socket.io/component-emitter/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@socket.io/component-emitter/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Emitter: () => (/* binding */ Emitter)\n/* harmony export */ });\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */ function Emitter(obj) {\n    if (obj) return mixin(obj);\n}\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */ function mixin(obj) {\n    for(var key in Emitter.prototype){\n        obj[key] = Emitter.prototype[key];\n    }\n    return obj;\n}\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */ Emitter.prototype.on = Emitter.prototype.addEventListener = function(event, fn) {\n    this._callbacks = this._callbacks || {};\n    (this._callbacks[\"$\" + event] = this._callbacks[\"$\" + event] || []).push(fn);\n    return this;\n};\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */ Emitter.prototype.once = function(event, fn) {\n    function on() {\n        this.off(event, on);\n        fn.apply(this, arguments);\n    }\n    on.fn = fn;\n    this.on(event, on);\n    return this;\n};\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */ Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function(event, fn) {\n    this._callbacks = this._callbacks || {};\n    // all\n    if (0 == arguments.length) {\n        this._callbacks = {};\n        return this;\n    }\n    // specific event\n    var callbacks = this._callbacks[\"$\" + event];\n    if (!callbacks) return this;\n    // remove all handlers\n    if (1 == arguments.length) {\n        delete this._callbacks[\"$\" + event];\n        return this;\n    }\n    // remove specific handler\n    var cb;\n    for(var i = 0; i < callbacks.length; i++){\n        cb = callbacks[i];\n        if (cb === fn || cb.fn === fn) {\n            callbacks.splice(i, 1);\n            break;\n        }\n    }\n    // Remove event specific arrays for event types that no\n    // one is subscribed for to avoid memory leak.\n    if (callbacks.length === 0) {\n        delete this._callbacks[\"$\" + event];\n    }\n    return this;\n};\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */ Emitter.prototype.emit = function(event) {\n    this._callbacks = this._callbacks || {};\n    var args = new Array(arguments.length - 1), callbacks = this._callbacks[\"$\" + event];\n    for(var i = 1; i < arguments.length; i++){\n        args[i - 1] = arguments[i];\n    }\n    if (callbacks) {\n        callbacks = callbacks.slice(0);\n        for(var i = 0, len = callbacks.length; i < len; ++i){\n            callbacks[i].apply(this, args);\n        }\n    }\n    return this;\n};\n// alias used for reserved events (protected method)\nEmitter.prototype.emitReserved = Emitter.prototype.emit;\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */ Emitter.prototype.listeners = function(event) {\n    this._callbacks = this._callbacks || {};\n    return this._callbacks[\"$\" + event] || [];\n};\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */ Emitter.prototype.hasListeners = function(event) {\n    return !!this.listeners(event).length;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@socket.io/component-emitter/index.mjs\n");

/***/ })

};
;