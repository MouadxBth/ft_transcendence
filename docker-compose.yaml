version: "3.8"

services:
  redis:
    container_name: redis
    image: redis:latest
    env_file:
      - .env
    expose:
      - 6379
    ports:
      - "6379:6379"
    networks:
      - ft_transcendence
    volumes:
      - redis_volume:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      start_period: 2s
      timeout: 10s
      retries: 3

  postgres:
    container_name: postgres
    image: postgres:latest
    env_file:
      - .env
    expose:
      - 5432
    ports:
      - "5432:5432"
    networks:
      - ft_transcendence
    volumes:
      - postgres_volume:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD", "pg_isready", "--quiet"]
      start_period: 2s
      timeout: 10s
      retries: 3

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile.${ENVIRONMENT}
    image: backend:latest
    ports:
      - ${BACKEND_PORT}:3000
    env_file:
      - .env
    networks:
      - ft_transcendence
    volumes:
      - node_modules_volume:/usr/src/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: sh prepare.sh

networks:
  ft_transcendence:
    name: ft_transcendence
    driver: bridge

volumes:
  redis_volume:
    name: redis_volume
    driver: local
    # driver_opts:
    #   o: bind
    #   type: none
    #   device: ${REDIS_DATA_DIR}

  postgres_volume:
    name: postgres_volume
    driver: local
    # driver_opts:
    #   o: bind
    #   type: none
    #   device: ${POSTGRES_DATA_DIR}

  node_modules_volume:
    name: node_modules_volume
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${NODE_MODULES_DIR}